function initDb(storage) {
	storage.root = {
		options: {
			skiptobnet: true
		},
		lootfilters: {}
	}

	return storage.root;
}

var storage;
var storageRoot;

try {
	storage = Storage.open(System.home("settings.db"));
	storageRoot = storage.root || initDb(storage);
} catch (e) {
	view.msgbox(#alert, "Failed to load settings. Your options/loot filters will not save. \nThis is normally a permissions issue and running as admin once typically fixes it.", "Settings failed to load.");
}

// Fixes update to latest version.
if (storageRoot.lootfilters == null){
	storageRoot.lootfilters = {};
}

var body = $(body);
var modalBackground = $(#modal-background);
var optionsModal = $(#options-modal);
var lootFilterModal = $(#loot-filter-modal);
var playButton = $(#play-button);
var news = $(#news);
var jsonFilters = null;
var lootFilterAuthors = $(#lootfilter-authors);
var selectedLootFilterAuthor = "";
var lootFilterList = $(#lootfilter-list);
var lootFilterListHeader = $(#lootfilter-header);
var lootfilterListDictionary = {};
var selectedLootFilter = {};
var lootFilterLoaded = false;
var savedLootFilterListLabel = $(#saved);
var ddrawOptions = null;

// handle pressing escape
event keydown (e) {
	if(e.keyCode == Event.VK_ESCAPE) {
		if(modalBackground.attributes.hasClass("is-visible")) {
			closeModals();
		} else {
			view.close();
		}
	}
}

self.ready = function() {
	// connect to debugger
	if( view.connectToInspector ) view.connectToInspector();

	// positioning the window in the middle of the screen:
	var (sx,sy,sw,sh) = view.screenBox(#workarea,#rectw); // getting screen/monitor size
	var (w,h) = (self.toPixels(750dip),self.toPixels(550dip))

	view.move( sx + (sw - w) / 2, sy + (sh - h) / 2, w, h);

	// disable news loading in favor of hard coding
	//loadNews();
	loadOptions();
	
	getDdrawOptions();
}

// function that is used by cpp for updating the
self.finish_update = function() {
	delete playButton.attributes["disabled"];
	playButton.attributes.removeClass("disabled");
}

self.on("click", "a[href^=http]", function(evt) {
	var href = this.attributes["href"];
	Sciter.launch(href); // will open the url in default browser
	return true; // consume the event
});

$(#play-button).onClick = function() {
	playButton.attributes["disabled"] = true;
	playButton.attributes.addClass("disabled");

	var filterOptions = storageRoot.lootfilters;

	view.frame.setLootFilter(
		filterOptions["selectedAuthor"],
		filterOptions["selectedFilter"],
		filterOptions["filterDownloadUrl"],
		filterOptions["filterUrl"]
	);
	view.frame.play(getLaunchArguments());
}

$(#options-button).onClick = function() {
	modalBackground.attributes.addClass("is-visible");
	optionsModal.attributes.addClass("is-visible");
	getDdrawOptions();
	if ($(#mode).value == "windowed") {
		$(#resolution).style.set {display: "block"};
	}
	else {
		$(#resolution).style.set {display: "none"};
	}
}

$(#width).onMouse = function(evt) {
    switch(evt.type) {
      case Event.HANDLED | Event.MOUSE_DOWN: break; // handled mouse down event in bubbling phase
    }
}

$(#mode).onValueChanged = function () {
	if ($(#mode).value == "windowed") {
		$(#resolution).style.set {display: "block"};
	}
	else {
		$(#resolution).style.set {display: "none"};
	}
}


$(#loot-filters-button).onClick = function() {
	getLootFilterJsonList(); 
		   
}

// deal with clicking the modal background
$(#modal-background).onClick = function() {
	closeModals();
}

// deal with all the modal close buttons
var modalCloseButtons = $$(.modal-close);
for(var modalCloseButton in modalCloseButtons) {
	modalCloseButton.onClick = function() {
		closeModals();
	}
}

// deal with options saving
event change $(input.launcher-option) {
	switch(this.attributes#type) {
		case "checkbox":
			storageRoot.options[this.attributes#name] = this.checked;
			break;
	}
}

function closeModals() {
	modalBackground.attributes.removeClass("is-visible");
	lootFilterLoaded = false;
	setDdrawOptions();

	var modals = $$(.modal);
	for (var modal in modals) {
		modal.attributes.removeClass("is-visible");
	}
}

function loadNews() {
	view.request({
		url: "https://storage.googleapis.com/pd2-launcher/news.json",
		protocol: #basic,
		output: #json,
		noCache: true,
		success: function(data, status) {
			news.clear();

			for(var item in data.items) {
				news.$append(
					<div.entry>
						<a.title href="{item.url}">{item.header}</a>
						<div.date>{item.date}</div>
					</div>
				);
			}
		},
		error:function(err, status) {

		}
	});
}

function getLootFilterJsonList(){
	if (jsonFilters == null){
		jsonFilters = [];
		view.request({
			url: "https://raw.githubusercontent.com/Project-Diablo-2/LootFilters/main/filters.json",
			protocol: #basic,
			output: #json,
			noCache: false,
			success: function(data, status) {
				jsonFilters.push({"author":"local", "url":"", "name":"local"});

				for (var d in data){
					jsonFilters.push(d);
				}
						
				openLootFiltersModal();
			},
			error:function(err, status) {
			}
		});
	} else {
		openLootFiltersModal();
	}
}

function openLootFiltersModal(){
	loadLootFilterAuthors();
	modalBackground.attributes.addClass("is-visible");
	lootFilterModal.attributes.addClass("is-visible");
}

function loadLootFilterAuthors(){
	lootFilterAuthors.clear();

	if (jsonFilters != null){
		for(var item in jsonFilters) {
			lootFilterAuthors.$append(
				<div id="{item.author}btn" class="author-button">
					<span id="{item.author}btntext">{item.author}</span>
				</div>
			);

			$(#{item.author}btntext).on("click", function(evt, btn){
				btn.parent.postEvent("click");
			});

			$(#{item.author}btn).on("click", function(evt, btn){
				var buttons = $$(.author-button);
				for (var button in buttons) {
					button.attributes.removeClass("author-button-selected");
				}
						
				btn.attributes.addClass("author-button-selected");
				selectLootFilterAuthor(btn.id.substr(0, btn.id.length - 3));
			});

			if (!lootFilterLoaded){
				if (item.author == storageRoot.lootfilters["selectedAuthor"]){
					$(#{item.author}btn).postEvent("click");
				}
			}
		}
	}
}

function selectLootFilterAuthor(author){
	selectedLootFilterAuthor = null;
	lootFilterList.clear();
	lootFilterListHeader.clear();


	if (author != null && author != ""){
		// Get author object
		for(var item in jsonFilters) {
			if (item.author == author){
				selectedLootFilterAuthor = item;
				break;
			}
		}

		if (author.toLowerCase() == "local"){
			var localFiles = view.frame.getLocalFiles();
			var filters = [];
			for (var item in localFiles){
				var f = item + "";
				if (f.indexOf(".filter") != -1){
					filters.push({"name": f});
				}
			}
			lootfilterListDictionary[author] = filters;
			onLootFilterAuthorLoadComplete(selectedLootFilterAuthor, filters);
		} else {
			if (lootfilterListDictionary[author] == null){
				// Lookup author git repo
				if (selectedLootFilterAuthor != null && selectedLootFilterAuthor.url != null){
					view.request({
					url: selectedLootFilterAuthor.url,
					protocol: #basic,
					output: #json,
					noCache: false,
					success: function(data, status) {
						var filters = [];
						for (var item in data){
							if (item.name.indexOf(".filter") != -1){
								filters.push(item);
							}
						}

						// Cache loaded loot filters to save data to github
						lootfilterListDictionary[author] = filters;
						// We have now loaded the loot filters, show them!
						onLootFilterAuthorLoadComplete(selectedLootFilterAuthor, filters);
					},
					error:function(err, status) {
					}
				});
				}                     
			} else {
				// Already loaded before
				onLootFilterAuthorLoadComplete(selectedLootFilterAuthor, lootfilterListDictionary[author]);
			}
		}
	}
}

function onLootFilterAuthorLoadComplete(author, filters){
	var url = "https://github.com/Project-Diablo-2/LootFilters";
	if (author.url){
		var repoStart = author.url.indexOf("/repos/") + 7;
		var repo = author.url.substr(repoStart);
		var reposEnd = repo.indexOf("/contents");
		repo = repo.substr(0, reposEnd);
		url = "https://github.com/" + repo;
	}

	lootFilterListHeader.$append(
		<div>
			<a href="{url}">&#128712; - {author.name}</a>
		</div>
	);

	if (filters != null){
		for(var item in filters) {
			var name = item.name.substr(0, item.name.indexOf(".filter"));
			lootFilterList.$append(
				<div id="{name}btn" class="lootfilter-button">
					<span id="{name}btntext">{item.name}</span>
				</div>
			);

			$(#{name}btntext).on("click", function(evt, btn){
				btn.parent.postEvent("click");
			});

			$(#{name}btn).on("click", function(evt, btn){
				var buttons = $$(.lootfilter-button);
				for (var button in buttons) {
					button.attributes.removeClass("lootfilter-button-selected");
				}

				for (var f in lootfilterListDictionary[selectedLootFilterAuthor.author]){
					var filterName = f.name.substr(0, f.name.indexOf(".filter"));
					if (filterName == btn.id.substr(0, btn.id.length - 3)){
						selectedLootFilter = f;
					}
				}
						
				btn.attributes.addClass("lootfilter-button-selected");
				storageRoot.lootfilters["selectedAuthor"] = selectedLootFilterAuthor.author;
				storageRoot.lootfilters["selectedFilter"] = selectedLootFilter.name;
				storageRoot.lootfilters["filterDownloadUrl"] = selectedLootFilter.download_url;
				storageRoot.lootfilters["filterUrl"] = selectedLootFilter.url;

				savedLootFilterListLabel.clear();

				if (lootFilterLoaded == true){
					savedLootFilterListLabel.$append(
						<span>Config Saved</span>
					);
				}

				savedLootFilterListLabel.timer(1000, function(){
					savedLootFilterListLabel.clear();
					return false;
				});
			});

			if (!lootFilterLoaded){
				if (item.name == storageRoot.lootfilters["selectedFilter"]){
					$(#{name}btn).postEvent("click");
				}
			}
		}

		lootFilterLoaded = true;
	}
}

function loadOptions() {
	var options = storageRoot.options;

	for(var key in options) {
		var value = options[key];
		var element = self.select("input.launcher-option[name='" + key + "']");
		if(element == null) {
			continue;
		}

		switch(element.attributes#type) {
			case "checkbox":
				element.checked = value;
				break;
		}
	}
}

function getLaunchArguments() {
	var args = [];
	var options = $$(input.launcher-option);

	for(var option in options) {
		if(option.attributes#type == "checkbox" && option.checked) {
			args.push(option.value);
		}
	}

	return args.join(" ");
}

function getDdrawOptions() {
	ddrawOptions = view.frame.getDdrawOptions();
	for (var el in $$(.ddraw)) {
		el.value = ddrawOptions.(el.id);
		// handling blank edit fields by adding default values
		if (el.value === undefined) {
			if (el.id == "posx" || el.id == "posy") {
				el.value = -32000;
			}
			else {
				el.value = 0;
			}
		}
	}
	if (ddrawOptions.fullscreen && ddrawOptions.windowed){
		$(#mode).value = "borderless"
	}
	else if (ddrawOptions.fullscreen){
		$(#mode).value = "fullscreen"
	}
	else {
		$(#mode).value = "windowed"
	}
}

function setDdrawOptions() {
	for (var el in $$(.ddraw)) {
		ddrawOptions.(el.id) = el.value;
	}
	if($(#mode).value == "borderless") {
		ddrawOptions.fullscreen = true;
		ddrawOptions.windowed = true;
	}
	else if($(#mode).value == "fullscreen") {
		ddrawOptions.fullscreen = true;
		ddrawOptions.windowed = false;
	}
	else {
		ddrawOptions.fullscreen = false;
		ddrawOptions.windowed = true;
	}
	view.frame.setDdrawOptions(ddrawOptions);
}
